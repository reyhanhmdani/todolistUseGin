// Code generated by mockery v2.20.2. DO NOT EDIT.

package mocks

import (
	entity "todoGin/model/entity"

	mock "github.com/stretchr/testify/mock"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: title
func (_m *TodoRepository) Create(title string) (*entity.Todolist, error) {
	ret := _m.Called(title)

	var r0 *entity.Todolist
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.Todolist, error)); ok {
		return rf(title)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.Todolist); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todolist)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: user
func (_m *TodoRepository) CreateUser(user *entity.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: todoID
func (_m *TodoRepository) Delete(todoID int64) (int64, error) {
	ret := _m.Called(todoID)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (int64, error)); ok {
		return rf(todoID)
	}
	if rf, ok := ret.Get(0).(func(int64) int64); ok {
		r0 = rf(todoID)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(todoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *TodoRepository) GetAll() ([]entity.Todolist, error) {
	ret := _m.Called()

	var r0 []entity.Todolist
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]entity.Todolist, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []entity.Todolist); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Todolist)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: todoID
func (_m *TodoRepository) GetByID(todoID int64) (*entity.Todolist, error) {
	ret := _m.Called(todoID)

	var r0 *entity.Todolist
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.Todolist, error)); ok {
		return rf(todoID)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.Todolist); ok {
		r0 = rf(todoID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todolist)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(todoID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *TodoRepository) GetUserByUsername(username string) (*entity.User, error) {
	ret := _m.Called(username)

	var r0 *entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: todoID, updates
func (_m *TodoRepository) Update(todoID int64, updates map[string]interface{}) (*entity.Todolist, error) {
	ret := _m.Called(todoID, updates)

	var r0 *entity.Todolist
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, map[string]interface{}) (*entity.Todolist, error)); ok {
		return rf(todoID, updates)
	}
	if rf, ok := ret.Get(0).(func(int64, map[string]interface{}) *entity.Todolist); ok {
		r0 = rf(todoID, updates)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Todolist)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, map[string]interface{}) error); ok {
		r1 = rf(todoID, updates)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTodoRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewTodoRepository creates a new instance of TodoRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTodoRepository(t mockConstructorTestingTNewTodoRepository) *TodoRepository {
	mock := &TodoRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
